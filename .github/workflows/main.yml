name: Build and Distribute APK to Firebase

on:
  push:
    branches:
      - main  # Ana branch'e push yapıldığında tetiklenir
  pull_request:
    types: [closed]
    branches:
      - main  # Ana branch'e yapılan pull request (merge) işlemlerini tetikler

jobs:
  build:
    name: Build APK and Distribute to Firebase
    runs-on: ubuntu-latest

    steps:
      # 1. Kodu Checkout Et
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java, Android SDK vs. Gerekli Ortamı Kur
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'  # JDK dağıtımını belirtiyoruz

      # 3. Google Services JSON Dosyasını Yarat
      - name: Create google-services.json
        run: echo "${{ secrets.FIREBASE_GOOGLE_SERVICES_JSON }}" > app/google-services.json
      
      # 3.1. google-services.json Dosyasının Var Olup Olmadığını ve İçeriğini Kontrol Et
      - name: Check google-services.json file
        run: |
          ls -alh app/google-services.json  # Dosyanın varlığını kontrol eder
          cat app/google-services.json  # Dosyanın içeriğini gösterir
      
      # Android ile ilgili bağımlılıkları kur
      - name: Install Dependencies
        run: ./gradlew build

      # 4. APK'yı oluştur
      - name: Build APK
        run: ./gradlew assembleRelease  # Release APK oluşturur

      # 5. Firebase CLI'ı Kur
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # 6. Firebase kimlik doğrulaması için token'ı kullan
      - name: Authenticate with Firebase
        run: firebase login:ci --token ${{ secrets.FIREBASE_TOKEN }}

      # 7. Firebase App Distribution'a APK'yı Yükle
      - name: Upload APK to Firebase
        run: firebase appdistribution:distribute ./app/build/outputs/apk/release/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID }} \
          --groups "testers" \
          --token ${{ secrets.FIREBASE_TOKEN }}
